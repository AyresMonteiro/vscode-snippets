{
  "JavaScript MongoDB Script": {
    "scope": "javascript",
    "prefix": "jsmdbs",
    "body": [
      "const { MongoClient } = require(\"mongodb\");",
      "",
      "const databaseUri = \"INSERT YOUR DATABASE URI HERE\";",
      "",
      "const mongoClient = new MongoClient(databaseUri);",
      "",
      "const dbName = \"development\";",
      "",
      "async function clientConnect (data) {",
      "  await mongoClient.connect();",
      "",
      "  console.log(\"[Mongo] Successfully connected\");",
      "",
      "  return data;",
      "}",
      "",
      "async function getCollection () {",
      "  return await mongoClient",
      "    .db(dbName)",
      "    .collection(\"$1\")",
      "    .find($2)",
      "    .toArray();",
      "}",
      "",
      "clientConnect()",
      "  .catch(console.error)",
      "  .then(getCollection)",
      "  .then(console.log)",
      "  .finally(() => {",
      "    mongoClient.close();",
      "    console.log(\"[Mongo] Connection closed\");",
      "  })"
    ],
    "description": "Generates JS MongoDB Script Boilerplate"
  },
  "JavaScript Sheet Script": {
    "scope": "javascript",
    "prefix": "jsss",
    "body": [
      "const nodeXlsx = require(\"node-xlsx\");",
      "const path = require(\"path\");",
      "",
      "const sourceFilePath = path.resolve(__dirname, \"$1\");",
      "",
      "async function readXlsx(filePath) {",
      "  console.log(\"[Node XLSX] File reading: started\");",
      "",
      "  const workSheets = nodeXlsx.parse(filePath, { cellDates: true });",
      "",
      "  console.log(\"[Node XLSX] File reading: finished\");",
      "",
      "  return workSheets;",
      "}",
      "",
      "function getTable(data) {",
      "  return data.find((d) => d.name === \"$2\");",
      "}",
      "",
      "readXlsx(sourceFilePath)",
      "  .catch(console.error)",
      "  .then(getTable)",
      "  .then(console.log)"
    ],
    "description": "Generates JS Sheet Script Boilerplate"
  }
}
